<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>top5000_db</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>name</key>
			<string>root@127.0.0.1</string>
			<key>port</key>
			<integer>3306</integer>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGNjdYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK0HCBUWFxgZHSQoLDA0VSRudWxs0wkK
			CwwQFFdOUy5rZXlzWk5TLm9iamVjdHNWJGNsYXNzow0OD4ACgAOA
			BKMREhOABYAGgAiADFR0eXBlVHJvd3NUa2V5c18QJlNlbGVjdGlv
			bkRldGFpbFR5cGVQcmltYXJ5S2V5ZWREZXRhaWxz0wkKCxobHKCg
			gAfSHh8gIVokY2xhc3NuYW1lWCRjbGFzc2VzXxATTlNNdXRhYmxl
			RGljdGlvbmFyeaMgIiNcTlNEaWN0aW9uYXJ5WE5TT2JqZWN00goL
			JSehJoAJgAvSCykqK1lOUy5zdHJpbmeAClJpZNIeHy0uXxAPTlNN
			dXRhYmxlU3RyaW5noy0vI1hOU1N0cmluZ9IeHzEyXk5TTXV0YWJs
			ZUFycmF5ozEzI1dOU0FycmF50h4fIjWiIiNfEA9OU0tleWVkQXJj
			aGl2ZXLRODlUZGF0YYABAAgAEQAaACMALQAyADcARQBLAFIAWgBl
			AGwAcAByAHQAdgB6AHwAfgCAAIIAhwCMAJEAugDBAMIAwwDFAMoA
			1QDeAPQA+AEFAQ4BEwEVARcBGQEeASgBKgEtATIBRAFIAVEBVgFl
			AWkBcQF2AXkBiwGOAZMAAAAAAAACAQAAAAAAAAA6AAAAAAAAAAAA
			AAAAAAABlQ==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {991, 578}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>USE top5000_db;

DROP TABLE songs;

CREATE TABLE songs (
id INT(4) AUTO_INCREMENT NOT NULL,
artist VARCHAR(60) NOT NULL,
title VARCHAR(80) NOT NULL,
year INT(4),
popall DECIMAL(10,4),
popusa DECIMAL(10,4),
popuk DECIMAL(10,4),
popeurope DECIMAL(10,4),
popworld DECIMAL(10,4),
PRIMARY KEY(id));

-- https://dev.mysql.com/doc/refman/5.7/en/load-data.html --
-- THIS IS THE STRUCTURE FOR THE SQL STATEMENTS --
-- HERE WORKING WITH FILE WITHOUT HEADER ROWS --
LOAD DATA LOCAL INFILE  
"/Users/poweruser/Desktop/TopSongs.csv"
INTO TABLE songs  
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
(id,artist,title,year,popall,popusa,popuk,popeurope,popworld);

-- SOME QUERIES TO TRY --
-- A query which returns all data for songs sung by a specific artist --
SELECT * FROM songs WHERE artist = 'Eminem';
SELECT * FROM songs WHERE artist = 'Blondie';
SELECT * FROM songs WHERE artist = 'Supertramp';

SELECT artist, COUNT(artist) as artist_count FROM songs GROUP BY artist;

SELECT artist, COUNT(artist) as artist_count FROM songs GROUP BY artist
  ORDER BY artist_count DESC;

DROP TABLE artist_count_table;

CREATE TEMPORARY TABLE artist_count_table  AS (    
    SELECT artist, COUNT(artist) as artist_count FROM songs GROUP BY artist
  ORDER BY artist_count DESC
)

-- A query which returns all artists who appear within the top 5000 more than once --
-- 783 of these artists --
SELECT COUNT(artist) FROM artist_count_table WHERE artist_count &gt; 1; 
-- shows the names of the artists --
SELECT artist FROM artist_count_table WHERE artist_count &gt; 1;

--  A query which searches for a specific song in the top 5000 --
SELECT * FROM songs WHERE title = 'The Logical Song';
SELECT * FROM songs WHERE title = 'The Logical Song' AND artist = 'Supertramp';

-- show the top ten artists in terms of number of songs --
SELECT * FROM artist_count_table LIMIT 10;

-- this is another way of setting things up --
-- GROUP BY artist HAVING COUNT(*) &gt; 1 --


-- ALBUMS --
CREATE TABLE albums (
id INT(4) AUTO_INCREMENT NOT NULL,
artist VARCHAR(60) NOT NULL,
title VARCHAR(80) NOT NULL,
year INT(4),
popall DECIMAL(10,4),
popusa DECIMAL(10,4),
popuk DECIMAL(10,4),
popeurope DECIMAL(10,4),
popworld DECIMAL(10,4),
PRIMARY KEY(id));


-- THIS IS THE STRUCTURE FOR THE SQL STATEMENTS --
-- HERE WORKING WITH FILE WITHOUT HEADER ROWS --
LOAD DATA LOCAL INFILE  
"/Users/poweruser/Desktop/TopAlbums.csv"
INTO TABLE albums  
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
(id,artist,title,year,popall,popusa,popuk,popeurope,popworld);


-- It is your task to take these two large sets of data --
-- and come up with a method to join them together in order --
-- to figure out if a given artistâ€™s song and album made it --
-- into the charts at the time of their release. --

CREATE TEMPORARY TABLE album_table  AS (    
    SELECT id as album_id,
artist as album_artist,
title as album_title,
year as album_year,
popall as album_popall,
popusa as album_popusa,
popuk as album_popuk,
popeurope as album_popeurope,
popworld as album_popworld
FROM albums);










</string>
			<key>table</key>
			<string>albums</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>200</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>CREATE TEMPORARY TABLE album_table  AS (    
    SELECT id as album_id,
artist as album_artist,
title as album_title,
year as album_year,
popall as album_popall,
popusa as album_popusa,
popuk as album_popuk,
popeurope as album_popeurope,
popworld as album_popworld
FROM albums)</string>
		<string>CREATE TEMPORARY TABLE album_table  AS (    
    SELECT id as album_id,
artist as album_artist,
title as album_title,
year as album_year,
popall as album_popall,
popusa as album_popusa,
popuk as album_popuk,
popeurope as album_popeurope,
popworld as album_popworld
)</string>
		<string>LOAD DATA LOCAL INFILE  
"/Users/poweruser/Desktop/TopAlbums.csv"
INTO TABLE albums  
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
(id,artist,title,year,popall,popusa,popuk,popeurope,popworld)</string>
		<string>CREATE TABLE albums (
id INT(4) AUTO_INCREMENT NOT NULL,
artist VARCHAR(60) NOT NULL,
title VARCHAR(80) NOT NULL,
year INT(4),
popall DECIMAL(10,4),
popusa DECIMAL(10,4),
popuk DECIMAL(10,4),
popeurope DECIMAL(10,4),
popworld DECIMAL(10,4),
PRIMARY KEY(id))</string>
		<string>SELECT * FROM artist_count_table LIMIT 10</string>
		<string>SELECT * FROM songs WHERE title = 'The Logical Song'</string>
		<string>SELECT * FROM songs WHERE title = 'The Logical Song' AND artist = 'Supertramp'</string>
		<string>SELECT * FROM songs WHERE artist = 'Supertramp'</string>
		<string>SELECT artist FROM artist_count_table WHERE artist_count &gt; 1</string>
		<string>SELECT artist FROM songs WHERE artist_count &gt; 1</string>
		<string>CREATE TEMPORARY TABLE artist_count_table  AS (    
    SELECT artist, COUNT(artist) as artist_count FROM songs GROUP BY artist
  ORDER BY artist_count DESC
)</string>
		<string>CREATE TEMPORARY TABLE artist_count_table  AS (    
    SELECT artist, title, COUNT(artist) as artist_count FROM songs GROUP BY artist
  ORDER BY artist_count DESC
)</string>
		<string>CREATE TEMPORARY TABLE artist_count_table  AS (    
    SELECT *, COUNT(artist) as artist_count FROM songs GROUP BY artist
  ORDER BY artist_count DESC
)</string>
		<string>DROP TABLE artist_count_table</string>
		<string>CREATE TEMPORARY TABLE artist_count_table  AS (    
    SELECT * COUNT(artist) as artist_count FROM songs GROUP BY artist
  ORDER BY artist_count DESC
)</string>
		<string>-- 783 --
SELECT COUNT(artist) FROM artist_count_table WHERE artist_count &gt; 1</string>
		<string>SELECT COUNT(artist) FROM artist_count_table WHERE artist_count &gt; 1;
-- 783 --</string>
		<string>SELECT COUNT(artist) FROM artist_count_table WHERE artist_count &gt; 1</string>
		<string>COUNT(artist) FROM artist_count_table WHERE artist_count &gt; 1</string>
		<string>CREATE TEMPORARY TABLE artist_count_table  AS (    
    SSELECT artist, COUNT(artist) as artist_count FROM songs GROUP BY artist
  ORDER BY artist_count DESC
)</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.16</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
